
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010a0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080011d0  080011d0  000111d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001204  08001204  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001204  08001204  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001204  08001204  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001204  08001204  00011204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001208  08001208  00011208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800120c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000004  08001210  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  200006e8  08001210  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049b3  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000aed  00000000  00000000  000249e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000cf4  00000000  00000000  000254cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000240  00000000  00000000  000261c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000200  00000000  00000000  00026408  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000024e0  00000000  00000000  00026608  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002684  00000000  00000000  00028ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00010fd0  00000000  00000000  0002b16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003c13c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000724  00000000  00000000  0003c1b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080011b8 	.word	0x080011b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080011b8 	.word	0x080011b8

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
#include "CortexMx_OS_Porting.h"



void HardFault_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0

	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0

	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0

	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0

	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:



__attribute ((naked)) void SVC_Handler()
{
	__asm("TST LR,#4");
 8000234:	f01e 0f04 	tst.w	lr, #4
	__asm("ITE EQ"); 		/*if then equal*/
 8000238:	bf0c      	ite	eq
	__asm("MRSEQ R0,MSP");	/*Main stack pointer*/
 800023a:	f3ef 8008 	mrseq	r0, MSP
	__asm("MRSNE R0,PSP");  /*Process stack pointer*/
 800023e:	f3ef 8009 	mrsne	r0, PSP
	__asm("B OS_SVC");
 8000242:	f000 badd 	b.w	8000800 <OS_SVC>
}
 8000246:	bf00      	nop

08000248 <MYRTOS_HW_Init>:



void MYRTOS_HW_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0




	// decrease PendSV interrupt priority to be smaller than or equal systiK timer
	__NVIC_SetPriority(PendSV_IRQn,15);
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <Trigger_OS_PendSV>:


void Trigger_OS_PendSV(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	// Set PendSV
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <Trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <Trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]

}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <MYRTOS_Start_Ticker>:

void MYRTOS_Start_Ticker(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// CPU frequency = 8MHZ
	// every tick = 1 / 8M = .125us
	// 1ms = 1/.125m = 8000 ticks
	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <FIFO_init>:
|========================================================================|
*/

#include"MY_RTOS_FIFO.h"
/* *********************************** */
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]

	if(!buff )
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d101      	bne.n	800029e <FIFO_init+0x16>
		return FIFO_NULL;
 800029a:	2303      	movs	r3, #3
 800029c:	e011      	b.n	80002c2 <FIFO_init+0x3a>

	fifo->base = buff ;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	68da      	ldr	r2, [r3, #12]
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	68da      	ldr	r2, [r3, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002c0:	2300      	movs	r3, #0

}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d003      	beq.n	80002e6 <FIFO_enqueue+0x1a>
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	691b      	ldr	r3, [r3, #16]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d101      	bne.n	80002ea <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 80002e6:	2303      	movs	r3, #3
 80002e8:	e02d      	b.n	8000346 <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d107      	bne.n	8000306 <FIFO_enqueue+0x3a>
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	691b      	ldr	r3, [r3, #16]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d101      	bne.n	8000306 <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 8000302:	2301      	movs	r3, #1
 8000304:	e01f      	b.n	8000346 <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	68d2      	ldr	r2, [r2, #12]
 8000320:	4611      	mov	r1, r2
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	6912      	ldr	r2, [r2, #16]
 8000326:	0092      	lsls	r2, r2, #2
 8000328:	440a      	add	r2, r1
 800032a:	3a04      	subs	r2, #4
 800032c:	4293      	cmp	r3, r2
 800032e:	d104      	bne.n	800033a <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	68da      	ldr	r2, [r3, #12]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	e004      	b.n	8000344 <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	1d1a      	adds	r2, r3, #4
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 8000344:	2300      	movs	r3, #0


}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d003      	beq.n	800036a <FIFO_dequeue+0x1a>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	691b      	ldr	r3, [r3, #16]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d101      	bne.n	800036e <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 800036a:	2303      	movs	r3, #3
 800036c:	e028      	b.n	80003c0 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685a      	ldr	r2, [r3, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	429a      	cmp	r2, r3
 8000378:	d101      	bne.n	800037e <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 800037a:	2302      	movs	r3, #2
 800037c:	e020      	b.n	80003c0 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	1e5a      	subs	r2, r3, #1
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	68d2      	ldr	r2, [r2, #12]
 800039a:	4611      	mov	r1, r2
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	6912      	ldr	r2, [r2, #16]
 80003a0:	0092      	lsls	r2, r2, #2
 80003a2:	440a      	add	r2, r1
 80003a4:	3a04      	subs	r2, #4
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d104      	bne.n	80003b4 <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	68da      	ldr	r2, [r3, #12]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	e004      	b.n	80003be <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	1d1a      	adds	r2, r3, #4
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003be:	2300      	movs	r3, #0
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
	...

080003cc <PendSV_Handler>:
								{
	// ===================================
	// Save the context of the current task
	// =================================
	// 1- Get the current task PSP
	OS_GET_PSP(OS_Control.Current_Task->Task_Current_PSP);
 80003cc:	4b6f      	ldr	r3, [pc, #444]	; (800058c <PendSV_Handler+0x1c0>)
 80003ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003d2:	f3ef 8009 	mrs	r0, PSP
 80003d6:	4602      	mov	r2, r0
 80003d8:	635a      	str	r2, [r3, #52]	; 0x34

	// 2- using this PSP to store R4 --> R11 in the stack of the current task
	/*PUSH R4 in the stack of the current task*/
	OS_Control.Current_Task->Task_Current_PSP -- ;
 80003da:	4b6c      	ldr	r3, [pc, #432]	; (800058c <PendSV_Handler+0x1c0>)
 80003dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003e2:	3a04      	subs	r2, #4
 80003e4:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %0 , R4 " : "=r" (*(OS_Control.Current_Task->Task_Current_PSP)));
 80003e6:	4b69      	ldr	r3, [pc, #420]	; (800058c <PendSV_Handler+0x1c0>)
 80003e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ee:	4622      	mov	r2, r4
 80003f0:	601a      	str	r2, [r3, #0]
	/*PUSH R5 in the stack of the current task*/
	OS_Control.Current_Task->Task_Current_PSP -- ;
 80003f2:	4b66      	ldr	r3, [pc, #408]	; (800058c <PendSV_Handler+0x1c0>)
 80003f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003fa:	3a04      	subs	r2, #4
 80003fc:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %0 , R5 " : "=r" (*(OS_Control.Current_Task->Task_Current_PSP)));
 80003fe:	4b63      	ldr	r3, [pc, #396]	; (800058c <PendSV_Handler+0x1c0>)
 8000400:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000406:	462a      	mov	r2, r5
 8000408:	601a      	str	r2, [r3, #0]
	/*PUSH R6 in the stack of the current task*/
	OS_Control.Current_Task->Task_Current_PSP -- ;
 800040a:	4b60      	ldr	r3, [pc, #384]	; (800058c <PendSV_Handler+0x1c0>)
 800040c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000412:	3a04      	subs	r2, #4
 8000414:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %0 , R6 " : "=r" (*(OS_Control.Current_Task->Task_Current_PSP)));
 8000416:	4b5d      	ldr	r3, [pc, #372]	; (800058c <PendSV_Handler+0x1c0>)
 8000418:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800041c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800041e:	4632      	mov	r2, r6
 8000420:	601a      	str	r2, [r3, #0]
	/*PUSH R7 in the stack of the current task*/
	OS_Control.Current_Task->Task_Current_PSP -- ;
 8000422:	4b5a      	ldr	r3, [pc, #360]	; (800058c <PendSV_Handler+0x1c0>)
 8000424:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800042a:	3a04      	subs	r2, #4
 800042c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %0 , R7 " : "=r" (*(OS_Control.Current_Task->Task_Current_PSP)));
 800042e:	4b57      	ldr	r3, [pc, #348]	; (800058c <PendSV_Handler+0x1c0>)
 8000430:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000436:	463a      	mov	r2, r7
 8000438:	601a      	str	r2, [r3, #0]
	/*PUSH R8 in the stack of the current task*/
	OS_Control.Current_Task->Task_Current_PSP -- ;
 800043a:	4b54      	ldr	r3, [pc, #336]	; (800058c <PendSV_Handler+0x1c0>)
 800043c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000442:	3a04      	subs	r2, #4
 8000444:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %0 , R8 " : "=r" (*(OS_Control.Current_Task->Task_Current_PSP)));
 8000446:	4b51      	ldr	r3, [pc, #324]	; (800058c <PendSV_Handler+0x1c0>)
 8000448:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800044c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800044e:	4642      	mov	r2, r8
 8000450:	601a      	str	r2, [r3, #0]
	/*PUSH R9 in the stack of the current task*/
	OS_Control.Current_Task->Task_Current_PSP -- ;
 8000452:	4b4e      	ldr	r3, [pc, #312]	; (800058c <PendSV_Handler+0x1c0>)
 8000454:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800045a:	3a04      	subs	r2, #4
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile ("MOV %0 , R9 " : "=r" (*(OS_Control.Current_Task->Task_Current_PSP)));
 800045e:	4b4b      	ldr	r3, [pc, #300]	; (800058c <PendSV_Handler+0x1c0>)
 8000460:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000466:	464a      	mov	r2, r9
 8000468:	601a      	str	r2, [r3, #0]
	/*PUSH R10 in the stack of the current task*/
	OS_Control.Current_Task->Task_Current_PSP -- ;
 800046a:	4b48      	ldr	r3, [pc, #288]	; (800058c <PendSV_Handler+0x1c0>)
 800046c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000472:	3a04      	subs	r2, #4
 8000474:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %0 , R10 " : "=r" (*(OS_Control.Current_Task->Task_Current_PSP)));
 8000476:	4b45      	ldr	r3, [pc, #276]	; (800058c <PendSV_Handler+0x1c0>)
 8000478:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800047c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047e:	4652      	mov	r2, sl
 8000480:	601a      	str	r2, [r3, #0]
	/*PUSH R11 in the stack of the current task*/
	OS_Control.Current_Task->Task_Current_PSP -- ;
 8000482:	4b42      	ldr	r3, [pc, #264]	; (800058c <PendSV_Handler+0x1c0>)
 8000484:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800048a:	3a04      	subs	r2, #4
 800048c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("MOV %0 , R11 " : "=r" (*(OS_Control.Current_Task->Task_Current_PSP)));
 800048e:	4b3f      	ldr	r3, [pc, #252]	; (800058c <PendSV_Handler+0x1c0>)
 8000490:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000496:	465a      	mov	r2, fp
 8000498:	601a      	str	r2, [r3, #0]


	// ===================================
	// Restore the context of the Next task
	// =================================
	if(OS_Control.Next_Task != NULL)
 800049a:	4b3c      	ldr	r3, [pc, #240]	; (800058c <PendSV_Handler+0x1c0>)
 800049c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d009      	beq.n	80004b8 <PendSV_Handler+0xec>
	{
		OS_Control.Current_Task = OS_Control.Next_Task;
 80004a4:	4b39      	ldr	r3, [pc, #228]	; (800058c <PendSV_Handler+0x1c0>)
 80004a6:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004aa:	4a38      	ldr	r2, [pc, #224]	; (800058c <PendSV_Handler+0x1c0>)
 80004ac:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.Next_Task = NULL;
 80004b0:	4b36      	ldr	r3, [pc, #216]	; (800058c <PendSV_Handler+0x1c0>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	// 1-Restore Registers (R11 to R4 )


	/*POP R11 from the stack of the next task*/
	__asm volatile("MOV R11 , %0 ": : "r"(*(OS_Control.Current_Task->Task_Current_PSP)));
 80004b8:	4b34      	ldr	r3, [pc, #208]	; (800058c <PendSV_Handler+0x1c0>)
 80004ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	469b      	mov	fp, r3
	OS_Control.Current_Task->Task_Current_PSP ++ ;
 80004c4:	4b31      	ldr	r3, [pc, #196]	; (800058c <PendSV_Handler+0x1c0>)
 80004c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004cc:	3204      	adds	r2, #4
 80004ce:	635a      	str	r2, [r3, #52]	; 0x34
	/*POP R10 from the stack of the next task*/
	__asm volatile("MOV R10 , %0 ": : "r"(*(OS_Control.Current_Task->Task_Current_PSP)));
 80004d0:	4b2e      	ldr	r3, [pc, #184]	; (800058c <PendSV_Handler+0x1c0>)
 80004d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	469a      	mov	sl, r3
	OS_Control.Current_Task->Task_Current_PSP ++ ;
 80004dc:	4b2b      	ldr	r3, [pc, #172]	; (800058c <PendSV_Handler+0x1c0>)
 80004de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004e4:	3204      	adds	r2, #4
 80004e6:	635a      	str	r2, [r3, #52]	; 0x34
	/*POP R9 from the stack of the next task*/
	__asm volatile("MOV R9 , %0 ": : "r"(*(OS_Control.Current_Task->Task_Current_PSP)));
 80004e8:	4b28      	ldr	r3, [pc, #160]	; (800058c <PendSV_Handler+0x1c0>)
 80004ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4699      	mov	r9, r3
	OS_Control.Current_Task->Task_Current_PSP ++ ;
 80004f4:	4b25      	ldr	r3, [pc, #148]	; (800058c <PendSV_Handler+0x1c0>)
 80004f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004fc:	3204      	adds	r2, #4
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
	/*POP R8 from the stack of the next task*/
	__asm volatile("MOV R8 , %0 ": : "r"(*(OS_Control.Current_Task->Task_Current_PSP)));
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <PendSV_Handler+0x1c0>)
 8000502:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4698      	mov	r8, r3
	OS_Control.Current_Task->Task_Current_PSP ++ ;
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <PendSV_Handler+0x1c0>)
 800050e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000514:	3204      	adds	r2, #4
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
	/*POP R7 from the stack of the next task*/
	__asm volatile("MOV R7 , %0 ": : "r"(*(OS_Control.Current_Task->Task_Current_PSP)));
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <PendSV_Handler+0x1c0>)
 800051a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800051e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	461f      	mov	r7, r3
	OS_Control.Current_Task->Task_Current_PSP ++ ;
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <PendSV_Handler+0x1c0>)
 8000526:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800052a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800052c:	3204      	adds	r2, #4
 800052e:	635a      	str	r2, [r3, #52]	; 0x34
	/*POP R6 from the stack of the next task*/
	__asm volatile("MOV R6 , %0 ": : "r"(*(OS_Control.Current_Task->Task_Current_PSP)));
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <PendSV_Handler+0x1c0>)
 8000532:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	461e      	mov	r6, r3
	OS_Control.Current_Task->Task_Current_PSP ++ ;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <PendSV_Handler+0x1c0>)
 800053e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000544:	3204      	adds	r2, #4
 8000546:	635a      	str	r2, [r3, #52]	; 0x34
	/*POP R5 from the stack of the next task*/
	__asm volatile("MOV R5 , %0 ": : "r"(*(OS_Control.Current_Task->Task_Current_PSP)));
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <PendSV_Handler+0x1c0>)
 800054a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800054e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	461d      	mov	r5, r3
	OS_Control.Current_Task->Task_Current_PSP ++ ;
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <PendSV_Handler+0x1c0>)
 8000556:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800055a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055c:	3204      	adds	r2, #4
 800055e:	635a      	str	r2, [r3, #52]	; 0x34
	/*POP R4 from the stack of the next task*/
	__asm volatile("MOV R4 , %0 ": : "r"(*(OS_Control.Current_Task->Task_Current_PSP)));
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <PendSV_Handler+0x1c0>)
 8000562:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	461c      	mov	r4, r3
	OS_Control.Current_Task->Task_Current_PSP ++ ;
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <PendSV_Handler+0x1c0>)
 800056e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000574:	3204      	adds	r2, #4
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
	/* now the PSP is point to R0 , the CPU Default unstacks (R0 , R1 , R2 ,R3,R12 ,LR , PC , xPSP ) */
	// 2-Update the PSP and exit
	OS_SET_PSP(OS_Control.Current_Task->Task_Current_PSP);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <PendSV_Handler+0x1c0>)
 800057a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800057e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000580:	4618      	mov	r0, r3
 8000582:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 8000586:	4770      	bx	lr
								}
 8000588:	bf00      	nop
 800058a:	4618      	mov	r0, r3
 800058c:	20000044 	.word	0x20000044

08000590 <SysTick_Handler>:

int systickLED;
void SysTick_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	systickLED ^=1;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <SysTick_Handler+0x20>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f083 0301 	eor.w	r3, r3, #1
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <SysTick_Handler+0x20>)
 800059e:	6013      	str	r3, [r2, #0]
	//
	MYRTOS_Update_Task_Waiting_Time();
 80005a0:	f000 faaa 	bl	8000af8 <MYRTOS_Update_Task_Waiting_Time>
	//decide what is the next task should be executed
	MYRTOS_Decide_What_Next();
 80005a4:	f000 fa26 	bl	80009f4 <MYRTOS_Decide_What_Next>
	// trigger to the next task
	Trigger_OS_PendSV();
 80005a8:	f7ff fe58 	bl	800025c <Trigger_OS_PendSV>

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000380 	.word	0x20000380

080005b4 <MYRTOS_init>:

MYRTOS_Error_Source MYRTOS_init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	MYRTOS_Error_Source error;

	error = MYRTOS_NO_ERROR;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
	// Update OS mode (Suspend)
	OS_Control.OSModeID = OSModeSuspend;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <MYRTOS_init+0x5c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	// Specify the Main Stack for OS
	MYRTOS_Creat_Main_Stack();
 80005c6:	f000 f831 	bl	800062c <MYRTOS_Creat_Main_Stack>
	//Create OS Ready Queue
	if(FIFO_init(&Ready_Queue,Ready_Queue_FIFO,100) != FIFO_NO_ERROR)
 80005ca:	2264      	movs	r2, #100	; 0x64
 80005cc:	4911      	ldr	r1, [pc, #68]	; (8000614 <MYRTOS_init+0x60>)
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <MYRTOS_init+0x64>)
 80005d0:	f7ff fe5a 	bl	8000288 <FIFO_init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <MYRTOS_init+0x2c>
	{
		error += Ready_Queue_Init_Error;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	3301      	adds	r3, #1
 80005de:	71fb      	strb	r3, [r7, #7]
	}
	// Configure Idle Task
	MYRTOS_IDLE_Task.Task_Priority = 255 ;
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MYRTOS_init+0x68>)
 80005e2:	22ff      	movs	r2, #255	; 0xff
 80005e4:	711a      	strb	r2, [r3, #4]
	MYRTOS_IDLE_Task.P_Task_Entry = MYRTOS_Idle_Task ;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <MYRTOS_init+0x68>)
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <MYRTOS_init+0x6c>)
 80005ea:	609a      	str	r2, [r3, #8]
	strcpy(MYRTOS_IDLE_Task.Task_Name , "IDLE_Task");
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MYRTOS_init+0x70>)
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <MYRTOS_init+0x74>)
 80005f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f2:	c303      	stmia	r3!, {r0, r1}
 80005f4:	801a      	strh	r2, [r3, #0]
	MYRTOS_IDLE_Task.Task_Size = IDLE_Task_Size;
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MYRTOS_init+0x68>)
 80005f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005fc:	601a      	str	r2, [r3, #0]
	MYRTOS_Creat_Task(&MYRTOS_IDLE_Task);
 80005fe:	4807      	ldr	r0, [pc, #28]	; (800061c <MYRTOS_init+0x68>)
 8000600:	f000 f83e 	bl	8000680 <MYRTOS_Creat_Task>

	return error;
 8000604:	79fb      	ldrb	r3, [r7, #7]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000044 	.word	0x20000044
 8000614:	200003cc 	.word	0x200003cc
 8000618:	20000030 	.word	0x20000030
 800061c:	20000388 	.word	0x20000388
 8000620:	08000669 	.word	0x08000669
 8000624:	20000394 	.word	0x20000394
 8000628:	080011d0 	.word	0x080011d0

0800062c <MYRTOS_Creat_Main_Stack>:

void MYRTOS_Creat_Main_Stack()
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	OS_Control._S_MSP = (uint32_t)&_estack ;
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <MYRTOS_Creat_Main_Stack+0x34>)
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MYRTOS_Creat_Main_Stack+0x38>)
 8000634:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = (OS_Control._S_MSP - Main_Stack_Size);
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MYRTOS_Creat_Main_Stack+0x38>)
 800063a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800063e:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <MYRTOS_Creat_Main_Stack+0x38>)
 8000644:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP - 0x8 ) ;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MYRTOS_Creat_Main_Stack+0x38>)
 800064a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800064e:	3b08      	subs	r3, #8
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <MYRTOS_Creat_Main_Stack+0x38>)
 8000652:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20002800 	.word	0x20002800
 8000664:	20000044 	.word	0x20000044

08000668 <MYRTOS_Idle_Task>:


int IdletaskLED;

void MYRTOS_Idle_Task(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	while (1)
	{
		IdletaskLED ^=1;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <MYRTOS_Idle_Task+0x14>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f083 0301 	eor.w	r3, r3, #1
 8000674:	4a01      	ldr	r2, [pc, #4]	; (800067c <MYRTOS_Idle_Task+0x14>)
 8000676:	6013      	str	r3, [r2, #0]
		__asm("WFE");
 8000678:	bf20      	wfe
		IdletaskLED ^=1;
 800067a:	e7f7      	b.n	800066c <MYRTOS_Idle_Task+0x4>
 800067c:	20000384 	.word	0x20000384

08000680 <MYRTOS_Creat_Task>:
}



MYRTOS_Error_Source MYRTOS_Creat_Task(Task_ref *Task_x)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	MYRTOS_Error_Source error;

	error = MYRTOS_NO_ERROR;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]
	// Check Task size exceed the PSP stack
	Task_x->Task_S_PSP = OS_Control.PSP_Task_Locator ;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MYRTOS_Creat_Task+0x74>)
 800068e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
	Task_x->Task_E_PSP = (Task_x->Task_S_PSP - Task_x->Task_Size );
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1ad2      	subs	r2, r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	631a      	str	r2, [r3, #48]	; 0x30
	//Task_x->Task_Current_PSP = OS_Control->PSP_Task_Locator ;
	if(Task_x->Task_E_PSP <  (uint32_t)&_eheap)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <MYRTOS_Creat_Task+0x78>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d201      	bcs.n	80006b2 <MYRTOS_Creat_Task+0x32>
	{
		return Task_Exceeded_StackSize_Error;
 80006ae:	2302      	movs	r3, #2
 80006b0:	e01b      	b.n	80006ea <MYRTOS_Creat_Task+0x6a>
	{
		/* Misra */
	}

	// Aligned 8 byte between PSP_Task_x and PSP_Task_y
	OS_Control.PSP_Task_Locator = Task_x->Task_E_PSP - 8 ;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	3b08      	subs	r3, #8
 80006b8:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <MYRTOS_Creat_Task+0x74>)
 80006ba:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	// Initialize PSP Task Stack
	MYRTOS_Creat_Task_Stack(Task_x);
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 f81c 	bl	80006fc <MYRTOS_Creat_Task_Stack>

	// update scheduler table
	OS_Control.OS_Tasks[OS_Control.NoOfActiveTask] = Task_x;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MYRTOS_Creat_Task+0x74>)
 80006c6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80006ca:	490a      	ldr	r1, [pc, #40]	; (80006f4 <MYRTOS_Creat_Task+0x74>)
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTask++;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MYRTOS_Creat_Task+0x74>)
 80006d4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80006d8:	3301      	adds	r3, #1
 80006da:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <MYRTOS_Creat_Task+0x74>)
 80006dc:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	// Update task status (Suspend)
	Task_x->Task_State = Task_Suspend;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	return error;
 80006e8:	7bfb      	ldrb	r3, [r7, #15]

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000044 	.word	0x20000044
 80006f8:	200008e8 	.word	0x200008e8

080006fc <MYRTOS_Creat_Task_Stack>:


void MYRTOS_Creat_Task_Stack(Task_ref *Task_x)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	//Task_Frame Task ;


	Task_x->Task_Current_PSP = Task_x->Task_S_PSP ;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000708:	461a      	mov	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	635a      	str	r2, [r3, #52]	; 0x34

	Task_x->Task_Current_PSP -- ;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000712:	1f1a      	subs	r2, r3, #4
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
	*(Task_x->Task_Current_PSP) = 0x01000000;  // xPSR --> T should = 1 to avoid Bus Fault
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800071c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000720:	601a      	str	r2, [r3, #0]

	Task_x->Task_Current_PSP -- ;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000726:	1f1a      	subs	r2, r3, #4
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
	*(Task_x->Task_Current_PSP) = (uint32_t)Task_x->P_Task_Entry;  // PC
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	689a      	ldr	r2, [r3, #8]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000734:	601a      	str	r2, [r3, #0]

	Task_x->Task_Current_PSP -- ;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073a:	1f1a      	subs	r2, r3, #4
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
	*(Task_x->Task_Current_PSP) = 0xFFFFFFFD; // LR(Execution Return ) Thread - PSP
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000744:	f06f 0202 	mvn.w	r2, #2
 8000748:	601a      	str	r2, [r3, #0]


	for(int i=0 ; i<13 ; i++)
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	e00b      	b.n	8000768 <MYRTOS_Creat_Task_Stack+0x6c>
	{
		Task_x->Task_Current_PSP -- ;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000754:	1f1a      	subs	r2, r3, #4
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
		*(Task_x->Task_Current_PSP) = 0x0;  // R0 --> R12
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
	for(int i=0 ; i<13 ; i++)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b0c      	cmp	r3, #12
 800076c:	ddf0      	ble.n	8000750 <MYRTOS_Creat_Task_Stack+0x54>
	}
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <MYRTOS_Activate_Task>:



void MYRTOS_Activate_Task(Task_ref *Task_x)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	Task_x->Task_State = Task_Waiting;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2201      	movs	r2, #1
 8000784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	MYRTOS_OS_SVC_Set(SVC_Activate_Task);
 8000788:	2000      	movs	r0, #0
 800078a:	f000 f813 	bl	80007b4 <MYRTOS_OS_SVC_Set>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <MYRTOS_Terminate_Task>:
void MYRTOS_Terminate_Task(Task_ref *Task_x)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
	Task_x->Task_State = Task_Suspend;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	MYRTOS_OS_SVC_Set(SVC_Terminate_Task);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f000 f804 	bl	80007b4 <MYRTOS_OS_SVC_Set>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <MYRTOS_OS_SVC_Set>:

// Thread Mode
void MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	switch (ID)
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d817      	bhi.n	80007f4 <MYRTOS_OS_SVC_Set+0x40>
 80007c4:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <MYRTOS_OS_SVC_Set+0x18>)
 80007c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ca:	bf00      	nop
 80007cc:	080007e1 	.word	0x080007e1
 80007d0:	080007e5 	.word	0x080007e5
 80007d4:	080007e9 	.word	0x080007e9
 80007d8:	080007ed 	.word	0x080007ed
 80007dc:	080007f1 	.word	0x080007f1
	{
	case SVC_Activate_Task:      __asm("SVC #0x00");           break;
 80007e0:	df00      	svc	0
 80007e2:	e007      	b.n	80007f4 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_Terminate_Task:     __asm("SVC #0x01");           break ;
 80007e4:	df01      	svc	1
 80007e6:	e005      	b.n	80007f4 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_Task_Waiting_Time:  __asm("SVC #0x02");           break ;
 80007e8:	df02      	svc	2
 80007ea:	e003      	b.n	80007f4 <MYRTOS_OS_SVC_Set+0x40>
	case SCV_Acquire_Mutex :     __asm("SVC #0x03");           break ;
 80007ec:	df03      	svc	3
 80007ee:	e001      	b.n	80007f4 <MYRTOS_OS_SVC_Set+0x40>
	case SVC_Release_Mutex:      __asm("SVC #0x04");           break ;
 80007f0:	df04      	svc	4
 80007f2:	bf00      	nop
	}
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop

08000800 <OS_SVC>:


// =============================================================================
// Handler mode (Privileged    ,  SP is shadow of  MSP )
void OS_SVC(uint32_t *StackFram)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	unsigned char SVC_Number;
	SVC_Number = *((unsigned char *)(((unsigned char *)StackFram[6])-2));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3318      	adds	r3, #24
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3b02      	subs	r3, #2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	73fb      	strb	r3, [r7, #15]
	switch (SVC_Number)
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b04      	cmp	r3, #4
 8000818:	d827      	bhi.n	800086a <OS_SVC+0x6a>
 800081a:	a201      	add	r2, pc, #4	; (adr r2, 8000820 <OS_SVC+0x20>)
 800081c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000820:	08000835 	.word	0x08000835
 8000824:	08000835 	.word	0x08000835
 8000828:	08000863 	.word	0x08000863
 800082c:	08000835 	.word	0x08000835
 8000830:	08000835 	.word	0x08000835
	case SVC_Activate_Task		 :
	case SVC_Terminate_Task		 :
	case SCV_Acquire_Mutex       :
	case SVC_Release_Mutex       :
		// Update scheduler table & Ready Queue
		MYRTOS_Update_scheduler_Table();
 8000834:	f000 f822 	bl	800087c <MYRTOS_Update_scheduler_Table>
		// Check OS is in Running state
		if(OS_Control.OSModeID == OSModeRunning)
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <OS_SVC+0x74>)
 800083a:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 800083e:	2b01      	cmp	r3, #1
 8000840:	d112      	bne.n	8000868 <OS_SVC+0x68>
		{
			if(strcmp(OS_Control.Current_Task->Task_Name , "IDLE_Task") != 0)
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <OS_SVC+0x74>)
 8000844:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000848:	330c      	adds	r3, #12
 800084a:	490b      	ldr	r1, [pc, #44]	; (8000878 <OS_SVC+0x78>)
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fc8f 	bl	8000170 <strcmp>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d007      	beq.n	8000868 <OS_SVC+0x68>
			{
				// the current task is not the idle task
				// Decide which task should be next
				MYRTOS_Decide_What_Next();
 8000858:	f000 f8cc 	bl	80009f4 <MYRTOS_Decide_What_Next>
				// Trigger OS_PendSV (Switch context / switch Restore)
				Trigger_OS_PendSV();
 800085c:	f7ff fcfe 	bl	800025c <Trigger_OS_PendSV>
			}
		}
		break;
 8000860:	e002      	b.n	8000868 <OS_SVC+0x68>
	case SVC_Task_Waiting_Time   :
		MYRTOS_Update_scheduler_Table();
 8000862:	f000 f80b 	bl	800087c <MYRTOS_Update_scheduler_Table>
		break;
 8000866:	e000      	b.n	800086a <OS_SVC+0x6a>
		break;
 8000868:	bf00      	nop
	}

}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000044 	.word	0x20000044
 8000878:	080011d0 	.word	0x080011d0

0800087c <MYRTOS_Update_scheduler_Table>:



void MYRTOS_Update_scheduler_Table(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
	Task_ref *temp = NULL;
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
	int i=0;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
	Task_ref *Ptask = NULL ;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
	Task_ref *PnextTask = NULL;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
	// 1- Bauble sort to scheduler table based on priority
	MYRTOS_OS_Bauble_Sort();
 8000892:	f000 f867 	bl	8000964 <MYRTOS_OS_Bauble_Sort>
	// 2- free Ready Queue
	while(FIFO_EMPTY != FIFO_dequeue(&Ready_Queue,&temp));
 8000896:	bf00      	nop
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	482f      	ldr	r0, [pc, #188]	; (800095c <MYRTOS_Update_scheduler_Table+0xe0>)
 800089e:	f7ff fd57 	bl	8000350 <FIFO_dequeue>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d1f7      	bne.n	8000898 <MYRTOS_Update_scheduler_Table+0x1c>
	// 3- Update Ready Queue with the new task
	while(i < OS_Control.NoOfActiveTask)
 80008a8:	e04b      	b.n	8000942 <MYRTOS_Update_scheduler_Table+0xc6>
	{
		Task_ref *Ptask = OS_Control.OS_Tasks[i] ;
 80008aa:	4a2d      	ldr	r2, [pc, #180]	; (8000960 <MYRTOS_Update_scheduler_Table+0xe4>)
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b2:	60bb      	str	r3, [r7, #8]
		Task_ref *PnextTask = OS_Control.OS_Tasks[i+1] ;
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a29      	ldr	r2, [pc, #164]	; (8000960 <MYRTOS_Update_scheduler_Table+0xe4>)
 80008ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008be:	607b      	str	r3, [r7, #4]
		if(Task_Suspend != Ptask->Task_State )
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d038      	beq.n	800093c <MYRTOS_Update_scheduler_Table+0xc0>
		{
			if((Task_Suspend == PnextTask->Task_State) || (i ==  OS_Control.NoOfActiveTask -1 ))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d006      	beq.n	80008e2 <MYRTOS_Update_scheduler_Table+0x66>
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MYRTOS_Update_scheduler_Table+0xe4>)
 80008d6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80008da:	1e5a      	subs	r2, r3, #1
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d108      	bne.n	80008f4 <MYRTOS_Update_scheduler_Table+0x78>
				//			if(PnextTask->Task_State == Task_Suspend)
			{
				// in case we reached to the end of available OS_Tasks
				FIFO_enqueue(&Ready_Queue, Ptask);
 80008e2:	68b9      	ldr	r1, [r7, #8]
 80008e4:	481d      	ldr	r0, [pc, #116]	; (800095c <MYRTOS_Update_scheduler_Table+0xe0>)
 80008e6:	f7ff fcf1 	bl	80002cc <FIFO_enqueue>
				// update PTask state
				Ptask->Task_State = Task_Ready;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	2202      	movs	r2, #2
 80008ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				break;  // because there is only one task is waiting
 80008f2:	e02e      	b.n	8000952 <MYRTOS_Update_scheduler_Table+0xd6>
			}
			if(Ptask->Task_Priority < PnextTask->Task_Priority)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	791a      	ldrb	r2, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d208      	bcs.n	8000912 <MYRTOS_Update_scheduler_Table+0x96>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	4816      	ldr	r0, [pc, #88]	; (800095c <MYRTOS_Update_scheduler_Table+0xe0>)
 8000904:	f7ff fce2 	bl	80002cc <FIFO_enqueue>
				// update PTask state
				Ptask->Task_State = Task_Ready;
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	2202      	movs	r2, #2
 800090c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				break;
 8000910:	e01f      	b.n	8000952 <MYRTOS_Update_scheduler_Table+0xd6>
			}
			else if(Ptask->Task_Priority == PnextTask->Task_Priority)
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	791a      	ldrb	r2, [r3, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	791b      	ldrb	r3, [r3, #4]
 800091a:	429a      	cmp	r2, r3
 800091c:	d108      	bne.n	8000930 <MYRTOS_Update_scheduler_Table+0xb4>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 800091e:	68b9      	ldr	r1, [r7, #8]
 8000920:	480e      	ldr	r0, [pc, #56]	; (800095c <MYRTOS_Update_scheduler_Table+0xe0>)
 8000922:	f7ff fcd3 	bl	80002cc <FIFO_enqueue>
				// update PTask state
				Ptask->Task_State = Task_Ready;
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	2202      	movs	r2, #2
 800092a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800092e:	e005      	b.n	800093c <MYRTOS_Update_scheduler_Table+0xc0>
			}
			else if(Ptask->Task_Priority > PnextTask->Task_Priority)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	791a      	ldrb	r2, [r3, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	429a      	cmp	r2, r3
 800093a:	d809      	bhi.n	8000950 <MYRTOS_Update_scheduler_Table+0xd4>
				// not allowed happened because we reordered it by bauble sort
				break;
			}
		}

		i++ ;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	3301      	adds	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
	while(i < OS_Control.NoOfActiveTask)
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <MYRTOS_Update_scheduler_Table+0xe4>)
 8000944:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	429a      	cmp	r2, r3
 800094c:	d8ad      	bhi.n	80008aa <MYRTOS_Update_scheduler_Table+0x2e>
		// todo if the current task is waiting and the next task is suspend
		// no may be the last one (solve this )
	}


}
 800094e:	e000      	b.n	8000952 <MYRTOS_Update_scheduler_Table+0xd6>
				break;
 8000950:	bf00      	nop
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000030 	.word	0x20000030
 8000960:	20000044 	.word	0x20000044

08000964 <MYRTOS_OS_Bauble_Sort>:



void MYRTOS_OS_Bauble_Sort(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
	Task_ref *temp	;
	int i, j , n = OS_Control.NoOfActiveTask;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MYRTOS_OS_Bauble_Sort+0x8c>)
 800096c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000970:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++) {
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	e030      	b.n	80009da <MYRTOS_OS_Bauble_Sort+0x76>
		for (j = 0; j < n - i - 1; j++)
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	e023      	b.n	80009c6 <MYRTOS_OS_Bauble_Sort+0x62>
		{
			if(OS_Control.OS_Tasks[j]->Task_Priority > OS_Control.OS_Tasks[j+1]->Task_Priority)
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MYRTOS_OS_Bauble_Sort+0x8c>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000986:	791a      	ldrb	r2, [r3, #4]
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	3301      	adds	r3, #1
 800098c:	4918      	ldr	r1, [pc, #96]	; (80009f0 <MYRTOS_OS_Bauble_Sort+0x8c>)
 800098e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000992:	791b      	ldrb	r3, [r3, #4]
 8000994:	429a      	cmp	r2, r3
 8000996:	d913      	bls.n	80009c0 <MYRTOS_OS_Bauble_Sort+0x5c>
			{
				temp  = OS_Control.OS_Tasks[j] ;
 8000998:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MYRTOS_OS_Bauble_Sort+0x8c>)
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	603b      	str	r3, [r7, #0]
				OS_Control.OS_Tasks[j]   =  OS_Control.OS_Tasks[j+1] ;
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MYRTOS_OS_Bauble_Sort+0x8c>)
 80009a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ac:	4910      	ldr	r1, [pc, #64]	; (80009f0 <MYRTOS_OS_Bauble_Sort+0x8c>)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_Tasks[j+1]= temp ;
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	3301      	adds	r3, #1
 80009b8:	490d      	ldr	r1, [pc, #52]	; (80009f0 <MYRTOS_OS_Bauble_Sort+0x8c>)
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	3b01      	subs	r3, #1
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbd4      	blt.n	800097e <MYRTOS_OS_Bauble_Sort+0x1a>
	for (i = 0; i < n - 1; i++) {
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3b01      	subs	r3, #1
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbc9      	blt.n	8000978 <MYRTOS_OS_Bauble_Sort+0x14>
			}
		}
	}
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000044 	.word	0x20000044

080009f4 <MYRTOS_Decide_What_Next>:
    }
 */


void MYRTOS_Decide_What_Next(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

	// if ready QUEUE is empty & current task is not suspend
	// there is only one task in activated , this task should execute until it terminate
	if((Ready_Queue.counter == 0 )&&(OS_Control.Current_Task->Task_State != Task_Suspend) )
 80009f8:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <MYRTOS_Decide_What_Next+0x98>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d11a      	bne.n	8000a36 <MYRTOS_Decide_What_Next+0x42>
 8000a00:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a02:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d013      	beq.n	8000a36 <MYRTOS_Decide_What_Next+0x42>
	{
		OS_Control.Current_Task->Task_State = Task_Running ;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a10:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a14:	2203      	movs	r2, #3
 8000a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		// add the current task again
		FIFO_enqueue(&Ready_Queue,OS_Control.Current_Task);
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a1c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a20:	4619      	mov	r1, r3
 8000a22:	481a      	ldr	r0, [pc, #104]	; (8000a8c <MYRTOS_Decide_What_Next+0x98>)
 8000a24:	f7ff fc52 	bl	80002cc <FIFO_enqueue>
		OS_Control.Next_Task = OS_Control.Current_Task;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a2a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a2e:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a30:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_Queue,OS_Control.Current_Task);
			OS_Control.Current_Task->Task_State = Task_Ready;
		}
	}

}
 8000a34:	e027      	b.n	8000a86 <MYRTOS_Decide_What_Next+0x92>
		FIFO_dequeue(&Ready_Queue, &OS_Control.Next_Task);
 8000a36:	4917      	ldr	r1, [pc, #92]	; (8000a94 <MYRTOS_Decide_What_Next+0xa0>)
 8000a38:	4814      	ldr	r0, [pc, #80]	; (8000a8c <MYRTOS_Decide_What_Next+0x98>)
 8000a3a:	f7ff fc89 	bl	8000350 <FIFO_dequeue>
		OS_Control.Next_Task->Task_State = Task_Running;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a40:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000a44:	2203      	movs	r2, #3
 8000a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		if((OS_Control.Current_Task->Task_Priority == OS_Control.Next_Task->Task_Priority)
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a4c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a50:	791a      	ldrb	r2, [r3, #4]
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a54:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000a58:	791b      	ldrb	r3, [r3, #4]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d113      	bne.n	8000a86 <MYRTOS_Decide_What_Next+0x92>
				&& (OS_Control.Current_Task-> Task_State != Task_Suspend))
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a60:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00c      	beq.n	8000a86 <MYRTOS_Decide_What_Next+0x92>
			FIFO_enqueue(&Ready_Queue,OS_Control.Current_Task);
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a6e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MYRTOS_Decide_What_Next+0x98>)
 8000a76:	f7ff fc29 	bl	80002cc <FIFO_enqueue>
			OS_Control.Current_Task->Task_State = Task_Ready;
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <MYRTOS_Decide_What_Next+0x9c>)
 8000a7c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a80:	2202      	movs	r2, #2
 8000a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000030 	.word	0x20000030
 8000a90:	20000044 	.word	0x20000044
 8000a94:	200001e8 	.word	0x200001e8

08000a98 <MYRTOS_Start>:


void MYRTOS_Start(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	OS_Control.OSModeID = OSModeRunning ;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MYRTOS_Start+0x58>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	// Set default task (Idle task)
	OS_Control.Current_Task = &MYRTOS_IDLE_Task;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MYRTOS_Start+0x58>)
 8000aa6:	4a13      	ldr	r2, [pc, #76]	; (8000af4 <MYRTOS_Start+0x5c>)
 8000aa8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	// Activate Idle task
	MYRTOS_Activate_Task(&MYRTOS_IDLE_Task);
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <MYRTOS_Start+0x5c>)
 8000aae:	f7ff fe63 	bl	8000778 <MYRTOS_Activate_Task>
	// start ticker
	MYRTOS_Start_Ticker();
 8000ab2:	f7ff fbe1 	bl	8000278 <MYRTOS_Start_Ticker>
	// set PSP to PSP of idle task
	OS_SET_PSP(OS_Control.Current_Task->Task_Current_PSP);
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MYRTOS_Start+0x58>)
 8000ab8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f380 8809 	msr	PSP, r0
	// switch from MSP to PSP
	OS_Switch_SP_to_PSP;
 8000ac4:	f3ef 8014 	mrs	r0, CONTROL
 8000ac8:	f04f 0102 	mov.w	r1, #2
 8000acc:	ea40 0001 	orr.w	r0, r0, r1
 8000ad0:	f380 8814 	msr	CONTROL, r0
	// switch to UnPrivileged access level
	Switch_To_UnPrivileged_Access_Level;
 8000ad4:	f3ef 8314 	mrs	r3, CONTROL
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	f383 8814 	msr	CONTROL, r3
	// update idle task to running state
	//OS_Control.Current_Task->Task_State = Task_Running;
	OS_Control.Current_Task->P_Task_Entry();
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <MYRTOS_Start+0x58>)
 8000ae2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	4798      	blx	r3
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000044 	.word	0x20000044
 8000af4:	20000388 	.word	0x20000388

08000af8 <MYRTOS_Update_Task_Waiting_Time>:

}


void MYRTOS_Update_Task_Waiting_Time()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	uint32_t i=0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
	for(;i<OS_Control.NoOfActiveTask;i++)
 8000b02:	e031      	b.n	8000b68 <MYRTOS_Update_Task_Waiting_Time+0x70>
	{
		if(OS_Control.OS_Tasks[i]->Task_State == Task_Suspend)
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <MYRTOS_Update_Task_Waiting_Time+0x84>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d126      	bne.n	8000b62 <MYRTOS_Update_Task_Waiting_Time+0x6a>
		{
			if(OS_Control.OS_Tasks[i]->T_Waiting.Blocking == Blocking_Enable)
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <MYRTOS_Update_Task_Waiting_Time+0x84>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d11e      	bne.n	8000b62 <MYRTOS_Update_Task_Waiting_Time+0x6a>
			{
				OS_Control.OS_Tasks[i]->T_Waiting.Ticks_Count --;
 8000b24:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MYRTOS_Update_Task_Waiting_Time+0x84>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b2e:	3a01      	subs	r2, #1
 8000b30:	641a      	str	r2, [r3, #64]	; 0x40
				if(OS_Control.OS_Tasks[i]->T_Waiting.Ticks_Count == 0 )
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MYRTOS_Update_Task_Waiting_Time+0x84>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d110      	bne.n	8000b62 <MYRTOS_Update_Task_Waiting_Time+0x6a>
				{
					OS_Control.OS_Tasks[i]->T_Waiting.Blocking = Blocking_Disable;
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <MYRTOS_Update_Task_Waiting_Time+0x84>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OS_Tasks[i]->Task_State = Task_Waiting;
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <MYRTOS_Update_Task_Waiting_Time+0x84>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b56:	2201      	movs	r2, #1
 8000b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					MYRTOS_OS_SVC_Set(SVC_Task_Waiting_Time);
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f7ff fe29 	bl	80007b4 <MYRTOS_OS_SVC_Set>
	for(;i<OS_Control.NoOfActiveTask;i++)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <MYRTOS_Update_Task_Waiting_Time+0x84>)
 8000b6a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d3c7      	bcc.n	8000b04 <MYRTOS_Update_Task_Waiting_Time+0xc>
		else {

		}

	}
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000044 	.word	0x20000044

08000b80 <MYRTOS_Acquire_Mutex>:




MYRTOS_Error_Source MYRTOS_Acquire_Mutex(Mutex_ref *Acquired_Mutex , Task_ref *Task)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	if(Acquired_Mutex->Current_Task == NULL) // Mutex is valid
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <MYRTOS_Acquire_Mutex+0x1a>
	{
		Acquired_Mutex->Current_Task = Task;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	e02a      	b.n	8000bf0 <MYRTOS_Acquire_Mutex+0x70>
	}
	else
	{
		if(Acquired_Mutex->Next_Task == NULL) // not pending by any other task
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d124      	bne.n	8000bec <MYRTOS_Acquire_Mutex+0x6c>
		{
			Acquired_Mutex->Next_Task = Task ;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	60da      	str	r2, [r3, #12]
			Acquired_Mutex->Next_Task->Task_State = Task_Suspend;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			if(Acquired_Mutex->Priority_Inheritance.Priority_Inheritance_State== PI_Enable)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d113      	bne.n	8000be4 <MYRTOS_Acquire_Mutex+0x64>
			{
				if(Acquired_Mutex->Current_Task->Task_Priority > Acquired_Mutex->Next_Task->Task_Priority )
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	791a      	ldrb	r2, [r3, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	791b      	ldrb	r3, [r3, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d90b      	bls.n	8000be4 <MYRTOS_Acquire_Mutex+0x64>
				{
					Acquired_Mutex->Priority_Inheritance.Saved_Pririty = Acquired_Mutex->Current_Task->Task_Priority;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	791a      	ldrb	r2, [r3, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
					Acquired_Mutex->Current_Task->Task_Priority = Acquired_Mutex->Next_Task->Task_Priority;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	7912      	ldrb	r2, [r2, #4]
 8000be2:	711a      	strb	r2, [r3, #4]
					// the priority of the required task is is lower than the priority of the current task
					// no need to Inheritance
				}
			}

			MYRTOS_OS_SVC_Set(SCV_Acquire_Mutex);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f7ff fde5 	bl	80007b4 <MYRTOS_OS_SVC_Set>
 8000bea:	e001      	b.n	8000bf0 <MYRTOS_Acquire_Mutex+0x70>
		}
		else
		{
			return MutexIsReceivedMaxNumberOfTasks;
 8000bec:	2303      	movs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <MYRTOS_Acquire_Mutex+0x72>
		}
	}

	return MYRTOS_NO_ERROR;
 8000bf0:	2300      	movs	r3, #0

}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <MYRTOS_Release_Mutex>:
void MYRTOS_Release_Mutex(Mutex_ref *Released_Mutex, Task_ref *Task)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
	if(Released_Mutex ->Current_Task != NULL)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d02c      	beq.n	8000c66 <MYRTOS_Release_Mutex+0x6c>
	{
		if(Released_Mutex->Current_Task == Task)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d127      	bne.n	8000c66 <MYRTOS_Release_Mutex+0x6c>
		{
			if(Released_Mutex->Priority_Inheritance.Priority_Inheritance_State== PI_Enable)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d10b      	bne.n	8000c38 <MYRTOS_Release_Mutex+0x3e>
			{
				Released_Mutex->Current_Task->Task_Priority = Released_Mutex->Priority_Inheritance.Saved_Pririty;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8000c2a:	711a      	strb	r2, [r3, #4]
				Released_Mutex->Priority_Inheritance.Saved_Pririty = Released_Mutex->Next_Task->Task_Priority;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	791a      	ldrb	r2, [r3, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			}
			if(Released_Mutex ->Next_Task == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d103      	bne.n	8000c48 <MYRTOS_Release_Mutex+0x4e>
			{
				// there is no task Acquired Mutex
				Released_Mutex->Current_Task = NULL ;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
	{
		// the mutex is already Released

	}

}
 8000c46:	e00e      	b.n	8000c66 <MYRTOS_Release_Mutex+0x6c>
				Released_Mutex->Current_Task = Released_Mutex->Next_Task;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
				Released_Mutex->Next_Task = NULL ;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
				Released_Mutex->Current_Task->Task_State = Task_Waiting;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				MYRTOS_OS_SVC_Set(SVC_Release_Mutex);
 8000c60:	2004      	movs	r0, #4
 8000c62:	f7ff fda7 	bl	80007b4 <MYRTOS_OS_SVC_Set>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <EXTI0_IRQHandler>:

// ================================================================
// IRQ Functions
//=================================================================
void EXTI0_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	//clear by writing 1 into the bit Pending register EXTRI_PR
	EXTRI->PR |= (1<<0);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <EXTI0_IRQHandler+0x1c>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <EXTI0_IRQHandler+0x1c>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[0]();
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <EXTI0_IRQHandler+0x20>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4798      	blx	r3
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40010400 	.word	0x40010400
 8000c90:	2000055c 	.word	0x2000055c

08000c94 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	EXTRI->PR |= (1<<1);
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <EXTI1_IRQHandler+0x1c>)
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <EXTI1_IRQHandler+0x1c>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[1]();
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <EXTI1_IRQHandler+0x20>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4798      	blx	r3
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40010400 	.word	0x40010400
 8000cb4:	2000055c 	.word	0x2000055c

08000cb8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	EXTRI->PR |= (1<<2);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <EXTI2_IRQHandler+0x1c>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <EXTI2_IRQHandler+0x1c>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[2]();
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <EXTI2_IRQHandler+0x20>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	4798      	blx	r3
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40010400 	.word	0x40010400
 8000cd8:	2000055c 	.word	0x2000055c

08000cdc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	//clear by writing 1 into the bit Pending register EXTRI_PR
	EXTRI->PR |= (1<<3);
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <EXTI3_IRQHandler+0x1c>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <EXTI3_IRQHandler+0x1c>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[3]();
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <EXTI3_IRQHandler+0x20>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	4798      	blx	r3

}void EXT4_IRQHandler(void)
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40010400 	.word	0x40010400
 8000cfc:	2000055c 	.word	0x2000055c

08000d00 <EXTI9_5_IRQHandler>:
	EXTRI->PR |= (1<<4);
	// call IRQ callBack
	GP_IRQ_CallBack[4]();
}
void EXTI9_5_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	// Check the EXTRI line number
	//clear by writing 1 into the bit Pending register EXTRI_PR
	// Call IRQ callBack
	if(EXTRI->PR & 1<<5) {EXTRI->PR |= (1<<5); 		GP_IRQ_CallBack[5]();}
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	f003 0320 	and.w	r3, r3, #32
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d008      	beq.n	8000d22 <EXTI9_5_IRQHandler+0x22>
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d16:	f043 0320 	orr.w	r3, r3, #32
 8000d1a:	6153      	str	r3, [r2, #20]
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <EXTI9_5_IRQHandler+0xa4>)
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	4798      	blx	r3
	if(EXTRI->PR & 1<<6) {EXTRI->PR |= (1<<6); 		GP_IRQ_CallBack[6]();}
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d008      	beq.n	8000d40 <EXTI9_5_IRQHandler+0x40>
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d38:	6153      	str	r3, [r2, #20]
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <EXTI9_5_IRQHandler+0xa4>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4798      	blx	r3
	if(EXTRI->PR & 1<<7) {EXTRI->PR |= (1<<7); 		GP_IRQ_CallBack[7]();}
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d008      	beq.n	8000d5e <EXTI9_5_IRQHandler+0x5e>
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d56:	6153      	str	r3, [r2, #20]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <EXTI9_5_IRQHandler+0xa4>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	4798      	blx	r3
	if(EXTRI->PR & 1<<8) {EXTRI->PR |= (1<<8); 		GP_IRQ_CallBack[8]();}
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d008      	beq.n	8000d7c <EXTI9_5_IRQHandler+0x7c>
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6153      	str	r3, [r2, #20]
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <EXTI9_5_IRQHandler+0xa4>)
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	4798      	blx	r3
	if(EXTRI->PR & 1<<9) {EXTRI->PR |= (1<<9); 		GP_IRQ_CallBack[9]();}
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d008      	beq.n	8000d9a <EXTI9_5_IRQHandler+0x9a>
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <EXTI9_5_IRQHandler+0xa0>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6153      	str	r3, [r2, #20]
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <EXTI9_5_IRQHandler+0xa4>)
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	4798      	blx	r3
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40010400 	.word	0x40010400
 8000da4:	2000055c 	.word	0x2000055c

08000da8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	// Check the EXTRI line number
	//clear by writing 1 into the bit Pending register EXTRI_PR
	// Call IRQ callBack
	if(EXTRI->PR & 1<<10) {EXTRI->PR |= (1<<10);    GP_IRQ_CallBack[10]();}
 8000dac:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d008      	beq.n	8000dca <EXTI15_10_IRQHandler+0x22>
 8000db8:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	4a29      	ldr	r2, [pc, #164]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6153      	str	r3, [r2, #20]
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <EXTI15_10_IRQHandler+0xc0>)
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	4798      	blx	r3
	if(EXTRI->PR & 1<<11) {EXTRI->PR |= (1<<11);    GP_IRQ_CallBack[11]();}
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d008      	beq.n	8000de8 <EXTI15_10_IRQHandler+0x40>
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000ddc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <EXTI15_10_IRQHandler+0xc0>)
 8000de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de6:	4798      	blx	r3
	if(EXTRI->PR & 1<<12) {EXTRI->PR |= (1<<12);    GP_IRQ_CallBack[12]();}
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d008      	beq.n	8000e06 <EXTI15_10_IRQHandler+0x5e>
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000dfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dfe:	6153      	str	r3, [r2, #20]
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <EXTI15_10_IRQHandler+0xc0>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4798      	blx	r3
	if(EXTRI->PR & 1<<13) {EXTRI->PR |= (1<<13); 	GP_IRQ_CallBack[13]();}
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d008      	beq.n	8000e24 <EXTI15_10_IRQHandler+0x7c>
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000e18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <EXTI15_10_IRQHandler+0xc0>)
 8000e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e22:	4798      	blx	r3
	if(EXTRI->PR & 1<<14) {EXTRI->PR |= (1<<14); 	GP_IRQ_CallBack[14]();}
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d008      	beq.n	8000e42 <EXTI15_10_IRQHandler+0x9a>
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3a:	6153      	str	r3, [r2, #20]
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <EXTI15_10_IRQHandler+0xc0>)
 8000e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e40:	4798      	blx	r3
	if(EXTRI->PR & 1<<15) {EXTRI->PR |= (1<<15); 	GP_IRQ_CallBack[15]();}
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d008      	beq.n	8000e60 <EXTI15_10_IRQHandler+0xb8>
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <EXTI15_10_IRQHandler+0xbc>)
 8000e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <EXTI15_10_IRQHandler+0xc0>)
 8000e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e5e:	4798      	blx	r3
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40010400 	.word	0x40010400
 8000e68:	2000055c 	.word	0x2000055c

08000e6c <Task_ONE>:
Task_ref Task1,Task2,Task3,Task4;
Mutex_ref MUTEX1;
uint8_t payload[3] = {1,2,3};

void Task_ONE(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	static int counter ;
	while(1)
	{
		task1LED ^=1;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <Task_ONE+0x48>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <Task_ONE+0x48>)
 8000e7a:	6013      	str	r3, [r2, #0]
		counter ++ ;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <Task_ONE+0x4c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <Task_ONE+0x4c>)
 8000e84:	6013      	str	r3, [r2, #0]
		if(counter == 100)
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <Task_ONE+0x4c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d106      	bne.n	8000e9c <Task_ONE+0x30>
		{
			MYRTOS_Acquire_Mutex(&MUTEX1, &Task1);
 8000e8e:	490b      	ldr	r1, [pc, #44]	; (8000ebc <Task_ONE+0x50>)
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <Task_ONE+0x54>)
 8000e92:	f7ff fe75 	bl	8000b80 <MYRTOS_Acquire_Mutex>
			MYRTOS_Activate_Task(&Task2);
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <Task_ONE+0x58>)
 8000e98:	f7ff fc6e 	bl	8000778 <MYRTOS_Activate_Task>
		}
		if(counter == 200)
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <Task_ONE+0x4c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2bc8      	cmp	r3, #200	; 0xc8
 8000ea2:	d1e5      	bne.n	8000e70 <Task_ONE+0x4>
		{
			MYRTOS_Release_Mutex(&MUTEX1, &Task1);
 8000ea4:	4905      	ldr	r1, [pc, #20]	; (8000ebc <Task_ONE+0x50>)
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <Task_ONE+0x54>)
 8000ea8:	f7ff fea7 	bl	8000bfa <MYRTOS_Release_Mutex>
			counter =0;
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <Task_ONE+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
		task1LED ^=1;
 8000eb2:	e7dd      	b.n	8000e70 <Task_ONE+0x4>
 8000eb4:	200006a0 	.word	0x200006a0
 8000eb8:	20000020 	.word	0x20000020
 8000ebc:	20000618 	.word	0x20000618
 8000ec0:	200005e0 	.word	0x200005e0
 8000ec4:	200006a4 	.word	0x200006a4

08000ec8 <Task_TWO>:
		}
	}
}
void Task_TWO(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	static int counter ;
	while(1)
	{
		task2LED ^=1;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <Task_TWO+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f083 0301 	eor.w	r3, r3, #1
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <Task_TWO+0x40>)
 8000ed6:	6013      	str	r3, [r2, #0]
		counter ++;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <Task_TWO+0x44>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <Task_TWO+0x44>)
 8000ee0:	6013      	str	r3, [r2, #0]
		if(counter == 100)
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <Task_TWO+0x44>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b64      	cmp	r3, #100	; 0x64
 8000ee8:	d102      	bne.n	8000ef0 <Task_TWO+0x28>
		{
			MYRTOS_Activate_Task(&Task3);
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <Task_TWO+0x48>)
 8000eec:	f7ff fc44 	bl	8000778 <MYRTOS_Activate_Task>
		}
		if(counter == 200)
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <Task_TWO+0x44>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2bc8      	cmp	r3, #200	; 0xc8
 8000ef6:	d1e9      	bne.n	8000ecc <Task_TWO+0x4>
		{
			MYRTOS_Terminate_Task(&Task2);
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <Task_TWO+0x4c>)
 8000efa:	f7ff fc4c 	bl	8000796 <MYRTOS_Terminate_Task>
			counter =0;
 8000efe:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <Task_TWO+0x44>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
		task2LED ^=1;
 8000f04:	e7e2      	b.n	8000ecc <Task_TWO+0x4>
 8000f06:	bf00      	nop
 8000f08:	200005dc 	.word	0x200005dc
 8000f0c:	20000024 	.word	0x20000024
 8000f10:	2000065c 	.word	0x2000065c
 8000f14:	200006a4 	.word	0x200006a4

08000f18 <Task_THREE>:
		}
	}
}
void Task_THREE(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	static int counter ;
	while(1)
	{
		task3LED ^=1;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <Task_THREE+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f083 0301 	eor.w	r3, r3, #1
 8000f24:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <Task_THREE+0x40>)
 8000f26:	6013      	str	r3, [r2, #0]
		counter ++;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <Task_THREE+0x44>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <Task_THREE+0x44>)
 8000f30:	6013      	str	r3, [r2, #0]
		if(counter == 100)
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <Task_THREE+0x44>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d102      	bne.n	8000f40 <Task_THREE+0x28>
		{
			MYRTOS_Activate_Task(&Task4);
 8000f3a:	4809      	ldr	r0, [pc, #36]	; (8000f60 <Task_THREE+0x48>)
 8000f3c:	f7ff fc1c 	bl	8000778 <MYRTOS_Activate_Task>
		}
		if(counter == 200)
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <Task_THREE+0x44>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2bc8      	cmp	r3, #200	; 0xc8
 8000f46:	d1e9      	bne.n	8000f1c <Task_THREE+0x4>
		{
			MYRTOS_Terminate_Task(&Task3);
 8000f48:	4806      	ldr	r0, [pc, #24]	; (8000f64 <Task_THREE+0x4c>)
 8000f4a:	f7ff fc24 	bl	8000796 <MYRTOS_Terminate_Task>
			counter =0;
 8000f4e:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <Task_THREE+0x44>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
		task3LED ^=1;
 8000f54:	e7e2      	b.n	8000f1c <Task_THREE+0x4>
 8000f56:	bf00      	nop
 8000f58:	20000610 	.word	0x20000610
 8000f5c:	20000028 	.word	0x20000028
 8000f60:	20000598 	.word	0x20000598
 8000f64:	2000065c 	.word	0x2000065c

08000f68 <Task_FOUR>:
		}
	}
}

void Task_FOUR(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	static int counter ;
	while(1)
	{
		task4LED ^=1;
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <Task_FOUR+0x48>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f083 0301 	eor.w	r3, r3, #1
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <Task_FOUR+0x48>)
 8000f76:	6013      	str	r3, [r2, #0]
		counter ++;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <Task_FOUR+0x4c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <Task_FOUR+0x4c>)
 8000f80:	6013      	str	r3, [r2, #0]
		if(counter == 20)
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <Task_FOUR+0x4c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b14      	cmp	r3, #20
 8000f88:	d103      	bne.n	8000f92 <Task_FOUR+0x2a>
		{
			// priority inheritance (task 1 will be highest priority until release mutes )
			MYRTOS_Acquire_Mutex(&MUTEX1, &Task4);
 8000f8a:	490b      	ldr	r1, [pc, #44]	; (8000fb8 <Task_FOUR+0x50>)
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <Task_FOUR+0x54>)
 8000f8e:	f7ff fdf7 	bl	8000b80 <MYRTOS_Acquire_Mutex>
		}
		if(counter == 200)
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <Task_FOUR+0x4c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2bc8      	cmp	r3, #200	; 0xc8
 8000f98:	d1e8      	bne.n	8000f6c <Task_FOUR+0x4>
		{
			MYRTOS_Release_Mutex(&MUTEX1, &Task4);
 8000f9a:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <Task_FOUR+0x50>)
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <Task_FOUR+0x54>)
 8000f9e:	f7ff fe2c 	bl	8000bfa <MYRTOS_Release_Mutex>
			MYRTOS_Terminate_Task(&Task4);
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <Task_FOUR+0x50>)
 8000fa4:	f7ff fbf7 	bl	8000796 <MYRTOS_Terminate_Task>
			counter = 0;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <Task_FOUR+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
		task4LED ^=1;
 8000fae:	e7dd      	b.n	8000f6c <Task_FOUR+0x4>
 8000fb0:	20000614 	.word	0x20000614
 8000fb4:	2000002c 	.word	0x2000002c
 8000fb8:	20000598 	.word	0x20000598
 8000fbc:	200005e0 	.word	0x200005e0

08000fc0 <main>:
		}
	}

}
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

	MYRTOS_HW_Init();
 8000fc6:	f7ff f93f 	bl	8000248 <MYRTOS_HW_Init>
	MYRTOS_Error_Source error ;

	if(MYRTOS_init() != MYRTOS_NO_ERROR)
 8000fca:	f7ff faf3 	bl	80005b4 <MYRTOS_init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d000      	beq.n	8000fd6 <main+0x16>
	{
		while(1);
 8000fd4:	e7fe      	b.n	8000fd4 <main+0x14>
	}


	strcpy(MUTEX1.Mutex_Name , "MUTEX_1");
 8000fd6:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <main+0x10c>)
 8000fd8:	4a3d      	ldr	r2, [pc, #244]	; (80010d0 <main+0x110>)
 8000fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fde:	e883 0003 	stmia.w	r3, {r0, r1}
	MUTEX1.PayLoad = payload;
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <main+0x114>)
 8000fe4:	4a3c      	ldr	r2, [pc, #240]	; (80010d8 <main+0x118>)
 8000fe6:	601a      	str	r2, [r3, #0]
	MUTEX1.PayLoadSize = 3;
 8000fe8:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <main+0x114>)
 8000fea:	2203      	movs	r2, #3
 8000fec:	605a      	str	r2, [r3, #4]
	MUTEX1.Priority_Inheritance.Priority_Inheritance_State = PI_Enable;
 8000fee:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <main+0x114>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	Task1.P_Task_Entry = Task_ONE ;
 8000ff6:	4b39      	ldr	r3, [pc, #228]	; (80010dc <main+0x11c>)
 8000ff8:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <main+0x120>)
 8000ffa:	609a      	str	r2, [r3, #8]
	strcpy(Task1.Task_Name , "Task_1");
 8000ffc:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <main+0x124>)
 8000ffe:	4a3a      	ldr	r2, [pc, #232]	; (80010e8 <main+0x128>)
 8001000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001004:	6018      	str	r0, [r3, #0]
 8001006:	3304      	adds	r3, #4
 8001008:	8019      	strh	r1, [r3, #0]
 800100a:	3302      	adds	r3, #2
 800100c:	0c0a      	lsrs	r2, r1, #16
 800100e:	701a      	strb	r2, [r3, #0]
	Task1.Task_Priority = 4 ;
 8001010:	4b32      	ldr	r3, [pc, #200]	; (80010dc <main+0x11c>)
 8001012:	2204      	movs	r2, #4
 8001014:	711a      	strb	r2, [r3, #4]
	Task1.Task_Size = 1024 ;
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <main+0x11c>)
 8001018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101c:	601a      	str	r2, [r3, #0]

	Task2.P_Task_Entry = Task_TWO ;
 800101e:	4b33      	ldr	r3, [pc, #204]	; (80010ec <main+0x12c>)
 8001020:	4a33      	ldr	r2, [pc, #204]	; (80010f0 <main+0x130>)
 8001022:	609a      	str	r2, [r3, #8]
	strcpy(Task2.Task_Name , "Task_2");
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <main+0x134>)
 8001026:	4a34      	ldr	r2, [pc, #208]	; (80010f8 <main+0x138>)
 8001028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102c:	6018      	str	r0, [r3, #0]
 800102e:	3304      	adds	r3, #4
 8001030:	8019      	strh	r1, [r3, #0]
 8001032:	3302      	adds	r3, #2
 8001034:	0c0a      	lsrs	r2, r1, #16
 8001036:	701a      	strb	r2, [r3, #0]
	Task2.Task_Priority = 3 ;
 8001038:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <main+0x12c>)
 800103a:	2203      	movs	r2, #3
 800103c:	711a      	strb	r2, [r3, #4]
	Task2.Task_Size = 1024 ;
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <main+0x12c>)
 8001040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001044:	601a      	str	r2, [r3, #0]

	Task3.P_Task_Entry = Task_THREE ;
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <main+0x13c>)
 8001048:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <main+0x140>)
 800104a:	609a      	str	r2, [r3, #8]
	strcpy(Task3.Task_Name , "Task_3");
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <main+0x144>)
 800104e:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <main+0x148>)
 8001050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001054:	6018      	str	r0, [r3, #0]
 8001056:	3304      	adds	r3, #4
 8001058:	8019      	strh	r1, [r3, #0]
 800105a:	3302      	adds	r3, #2
 800105c:	0c0a      	lsrs	r2, r1, #16
 800105e:	701a      	strb	r2, [r3, #0]
	Task3.Task_Priority = 2 ;
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <main+0x13c>)
 8001062:	2202      	movs	r2, #2
 8001064:	711a      	strb	r2, [r3, #4]
	Task3.Task_Size = 1024 ;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <main+0x13c>)
 8001068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106c:	601a      	str	r2, [r3, #0]


	Task4.P_Task_Entry = Task_FOUR ;
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <main+0x14c>)
 8001070:	4a27      	ldr	r2, [pc, #156]	; (8001110 <main+0x150>)
 8001072:	609a      	str	r2, [r3, #8]
	strcpy(Task4.Task_Name , "Task_4");
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <main+0x154>)
 8001076:	4a28      	ldr	r2, [pc, #160]	; (8001118 <main+0x158>)
 8001078:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107c:	6018      	str	r0, [r3, #0]
 800107e:	3304      	adds	r3, #4
 8001080:	8019      	strh	r1, [r3, #0]
 8001082:	3302      	adds	r3, #2
 8001084:	0c0a      	lsrs	r2, r1, #16
 8001086:	701a      	strb	r2, [r3, #0]
	Task4.Task_Priority = 1 ;
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <main+0x14c>)
 800108a:	2201      	movs	r2, #1
 800108c:	711a      	strb	r2, [r3, #4]
	Task4.Task_Size = 1024 ;
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <main+0x14c>)
 8001090:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001094:	601a      	str	r2, [r3, #0]

	error = MYRTOS_Creat_Task(&Task1);
 8001096:	4811      	ldr	r0, [pc, #68]	; (80010dc <main+0x11c>)
 8001098:	f7ff faf2 	bl	8000680 <MYRTOS_Creat_Task>
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
	error = MYRTOS_Creat_Task(&Task2);
 80010a0:	4812      	ldr	r0, [pc, #72]	; (80010ec <main+0x12c>)
 80010a2:	f7ff faed 	bl	8000680 <MYRTOS_Creat_Task>
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	error = MYRTOS_Creat_Task(&Task3);
 80010aa:	4814      	ldr	r0, [pc, #80]	; (80010fc <main+0x13c>)
 80010ac:	f7ff fae8 	bl	8000680 <MYRTOS_Creat_Task>
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
	error = MYRTOS_Creat_Task(&Task4);
 80010b4:	4815      	ldr	r0, [pc, #84]	; (800110c <main+0x14c>)
 80010b6:	f7ff fae3 	bl	8000680 <MYRTOS_Creat_Task>
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]


	// activate only task one
	// then task one will activate the highest priority task
	MYRTOS_Activate_Task(&Task1);
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <main+0x11c>)
 80010c0:	f7ff fb5a 	bl	8000778 <MYRTOS_Activate_Task>



	MYRTOS_Start();
 80010c4:	f7ff fce8 	bl	8000a98 <MYRTOS_Start>
	/* Loop forever */
	while(1)
 80010c8:	e7fe      	b.n	80010c8 <main+0x108>
 80010ca:	bf00      	nop
 80010cc:	200005f0 	.word	0x200005f0
 80010d0:	080011dc 	.word	0x080011dc
 80010d4:	200005e0 	.word	0x200005e0
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000618 	.word	0x20000618
 80010e0:	08000e6d 	.word	0x08000e6d
 80010e4:	20000624 	.word	0x20000624
 80010e8:	080011e4 	.word	0x080011e4
 80010ec:	200006a4 	.word	0x200006a4
 80010f0:	08000ec9 	.word	0x08000ec9
 80010f4:	200006b0 	.word	0x200006b0
 80010f8:	080011ec 	.word	0x080011ec
 80010fc:	2000065c 	.word	0x2000065c
 8001100:	08000f19 	.word	0x08000f19
 8001104:	20000668 	.word	0x20000668
 8001108:	080011f4 	.word	0x080011f4
 800110c:	20000598 	.word	0x20000598
 8001110:	08000f69 	.word	0x08000f69
 8001114:	200005a4 	.word	0x200005a4
 8001118:	080011fc 	.word	0x080011fc

0800111c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800111e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001120:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <LoopForever+0x6>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LoopForever+0xe>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <LoopForever+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800114a:	f000 f811 	bl	8001170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114e:	f7ff ff37 	bl	8000fc0 <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
  ldr   r0, =_estack
 8001154:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001160:	0800120c 	.word	0x0800120c
  ldr r2, =_sbss
 8001164:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001168:	200006e8 	.word	0x200006e8

0800116c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_2_IRQHandler>
	...

08001170 <__libc_init_array>:
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	2500      	movs	r5, #0
 8001174:	4e0c      	ldr	r6, [pc, #48]	; (80011a8 <__libc_init_array+0x38>)
 8001176:	4c0d      	ldr	r4, [pc, #52]	; (80011ac <__libc_init_array+0x3c>)
 8001178:	1ba4      	subs	r4, r4, r6
 800117a:	10a4      	asrs	r4, r4, #2
 800117c:	42a5      	cmp	r5, r4
 800117e:	d109      	bne.n	8001194 <__libc_init_array+0x24>
 8001180:	f000 f81a 	bl	80011b8 <_init>
 8001184:	2500      	movs	r5, #0
 8001186:	4e0a      	ldr	r6, [pc, #40]	; (80011b0 <__libc_init_array+0x40>)
 8001188:	4c0a      	ldr	r4, [pc, #40]	; (80011b4 <__libc_init_array+0x44>)
 800118a:	1ba4      	subs	r4, r4, r6
 800118c:	10a4      	asrs	r4, r4, #2
 800118e:	42a5      	cmp	r5, r4
 8001190:	d105      	bne.n	800119e <__libc_init_array+0x2e>
 8001192:	bd70      	pop	{r4, r5, r6, pc}
 8001194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001198:	4798      	blx	r3
 800119a:	3501      	adds	r5, #1
 800119c:	e7ee      	b.n	800117c <__libc_init_array+0xc>
 800119e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011a2:	4798      	blx	r3
 80011a4:	3501      	adds	r5, #1
 80011a6:	e7f2      	b.n	800118e <__libc_init_array+0x1e>
 80011a8:	08001204 	.word	0x08001204
 80011ac:	08001204 	.word	0x08001204
 80011b0:	08001204 	.word	0x08001204
 80011b4:	08001208 	.word	0x08001208

080011b8 <_init>:
 80011b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ba:	bf00      	nop
 80011bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011be:	bc08      	pop	{r3}
 80011c0:	469e      	mov	lr, r3
 80011c2:	4770      	bx	lr

080011c4 <_fini>:
 80011c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c6:	bf00      	nop
 80011c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ca:	bc08      	pop	{r3}
 80011cc:	469e      	mov	lr, r3
 80011ce:	4770      	bx	lr
